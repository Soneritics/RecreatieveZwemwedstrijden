@page "/match/registrations"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<PageTitle>Inschrijvingen</PageTitle>
<h1>Inschrijvingen</h1>
<p>Op deze pagina kunnen de deelnemende verenigingen worden toegevoegd, zodat hun zwemmers ingeschreven kunnen worden.</p>
<p>Je ziet hier alle inschrijvingen die tot nu toe ingevoerd zijn.</p>

@if (_registrations == default)
{
    <div><em>Bezig met laden van de inschrijvingen..</em></div>
}
else if (!_registrations.Any())
{
    <p class="mb-4"><em>Er zijn nog geen verenigingen aangemeld voor deze wedstrijd.</em></p>
}
else
{
    <div class="row mb-4">
        @foreach (var registrations in _registrations.OrderBy(r => r.Club))
        {
            <div class="col-lg-6 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h3>@registrations.Club</h3>
                
                        @if (registrations.RegistrationList?.Any() != true)
                        {
                            <p><em>Er zijn nog geen inschrijvingen gedaan bij @registrations.Club.</em></p>
                        }
                        else if (_match != default)
                        {
                            var programCount = _match.Programs?.Count() ?? 0;

                            <table class="table">
                                <thead>
                                    @if (programCount > 0)
                                    {
                                        <tr>
                                            <th rowspan="2">Voornaam</th>
                                            <th rowspan="2">Achternaam</th>
                                            <th rowspan="2">Geboortedatum</th>
                                            <th colspan="@programCount" class="text-center">Programma</th>
                                        </tr>
                                        <tr>
                                            @for (var i = 1; i <= programCount; i++)
                                            {
                                                <th>@i</th>
                                            }
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <th>Voornaam</th>
                                            <th>Achternaam</th>
                                            <th>Geboortedatum</th>
                                        </tr>
                                    }
                                </thead>
                                <tbody>
                                    @foreach (var registration in registrations.RegistrationList.OrderBy(r => r.Firstname))
                                    {
                                        <tr>
                                            <td>@registration.Firstname</td>
                                            <td>@registration.Lastname</td>
                                            <td>
                                                @{
                                                    var now = decimal.Parse(DateTime.Now.ToString("yyyyMMdd"));
                                                    var dob = decimal.Parse(registration.DateOfBirth.ToString("yyyyMMdd"));
                                                    var age = (now - dob) / 10000;
                                                }
                                                @registration.DateOfBirth.ToShortDateString()
                                                (@age.ToString("0.0") jaar)
                                            </td>
                                            @if (programCount > 0)
                                            {
                                                @foreach (var program in _match.Programs.OrderBy(p => p.Order))
                                                {
                                                    var value = registration.ProgramIds?.Contains(program.Id) == true ? "X" : "";
                                                    <td>@value</td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                
                        <p class="mb-0"><a href="/match/registrations-club/@registrations.Id" class="btn btn-secondary">Inschrijvingen beheren &raquo;</a></p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (_addClubFormVisible)
{
    <AddClubForm OnValidSubmitCallback="@AddRegistrationsAsync"></AddClubForm>
}
else
{
    <p><button class="btn btn-primary" @onclick="() => { _addClubFormVisible=true; }">Vereniging toevoegen &raquo;</button></p>
}

@code {
    [CascadingParameter]
    public SharedLayout Layout { get; set; }

    private bool _addClubFormVisible;

    private IEnumerable<Models.Registrations> _registrations;

    private Models.Match? _match;

    protected override async Task OnInitializedAsync()
    {
        var redirect =
            string.IsNullOrEmpty(Layout?.MatchId) ||
            (await httpClient.GetStringAsync($"/api/matchExists?matchId={Layout.MatchId}")).Equals("0");

        if (redirect)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _match = await httpClient.GetFromJsonAsync<Models.Match>($"/api/GetMatchDetails?matchId={Layout.MatchId}");
        await LoadRegistrationsAsync();
    }

    private async Task AddRegistrationsAsync(Models.Registrations model)
    {
        model.MatchId = Layout.MatchId;
        await httpClient.PostAsJsonAsync($"/api/AddRegistrations", model);

        _addClubFormVisible = false;
        await LoadRegistrationsAsync();
    }

    private async Task LoadRegistrationsAsync()
    {
        _registrations = await httpClient
            .GetFromJsonAsync<IEnumerable<Models.Registrations>>($"/api/GetMatchRegistrations?matchId={Layout.MatchId}")
            ?? new List<Models.Registrations>();
    }
}
