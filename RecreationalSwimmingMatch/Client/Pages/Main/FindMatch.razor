@page "/find-match"
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@using System.ComponentModel.DataAnnotations

<PageTitle>Wedstrijd openen</PageTitle>
<h1>Wedstrijd openen</h1>
<p>Hier kan een eerder aangemaakte wedstrijd geopend worden.</p>
<p>Vul hiervoor in het onderstande formulier het ID in van de eerder gemaakte wedstrijd.</p>

<EditForm Model="@_matchIdModel" OnValidSubmit="@OpenMatch">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    @if (_errorMessageVisible)
    {
        <div class="validation-message">Er is geen wedstrijd gevonden met dit ID.</div>
    }

    <div class="row mb-3">
        <div class="col-md-4">
            <div class="row">
                <div class="col-auto"><label class="col-form-label">Wedstrijd ID:</label></div>
                <div class="col">
                    <InputText id="matchId" class="form-control" @bind-Value="_matchIdModel.MatchId" />
                </div>
            </div>
        </div>
    </div>
    
    <p><button class="btn btn-primary" type="submit">Wedstrijd openen &raquo;</button></p>
</EditForm>

@code {
    [CascadingParameter]
    public SharedLayout Layout { get; set; }

    private MatchIdModel _matchIdModel = new();

    private bool _errorMessageVisible { get; set; }

    private async Task OpenMatch()
    {
        var matchExists = await httpClient
            .GetStringAsync($"/api/matchExists?matchId={_matchIdModel.MatchId}");

        if (matchExists.Equals("0"))
        {
            _errorMessageVisible = true;
        }
        else
        {
            _errorMessageVisible = false;
            Layout.MatchId = _matchIdModel.MatchId;
            NavigationManager.NavigateTo("/match");
        }
    }

    internal class MatchIdModel
    {
        [Required]
        public string? MatchId { get; set; }
    }
}
