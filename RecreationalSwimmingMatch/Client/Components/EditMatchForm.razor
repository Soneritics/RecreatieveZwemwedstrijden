@using Models

<EditForm Model="@Model" OnValidSubmit="@ValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="row">
        <div class="col-lg-6">
            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Organisator</label></div>
                
                <div class="col">
                    @if (CanEdit)
                    {
                        <InputText class="form-control" @bind-Value="Model.Organiser" />
                    }
                    else
                    {
                        <span>@Model.Organiser</span>
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Zwembad</label></div>
                <div class="col">
                    @if (CanEdit)
                    {
                        <InputText class="form-control" @bind-Value="Model.PoolName"/>
                    }
                    else
                    {
                        <span>@Model.PoolName</span>
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Adres</label></div>
                <div class="col">
                    @if (CanEdit)
                    {
                        <InputText class="form-control" @bind-Value="Model.PoolAddress"/>
                    }
                    else
                    {
                        <span>@Model.PoolAddress</span>
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Datum</label></div>
                <div class="col">
                    @if (CanEdit)
                    {
                        <div class="row">
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Date.Day">
                                    @for (var i = 1; i <= 31; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-auto">-</div>
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Date.Month">
                                    @for (var i = 1; i <= 12; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-auto">-</div>
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Date.Year">
                                    @for (var i = Model.Date.Year < Model.Date.Year - 1 ? Model.Date.Year : Model.Date.Year - 1; i <= DateTime.Now.Year + 1; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    else
                    {
                        <span>@Model.Date.Day</span><span>-</span><span>@Model.Date.Month</span><span>-</span><span>@Model.Date.Year</span>
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Inzwemmen</label></div>
                <div class="col">
                    @if (CanEdit)
                    {
                        <div class="row">
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Warmup.Hour">
                                    @for (var i = 0; i <= 23; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-auto">:</div>
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Warmup.Minute">
                                    @for (var i = 0; i <= 59; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    else
                    {
                        <span>@Model.Warmup.Hour</span><span>:</span><span>@Model.Warmup.Minute</span>
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Aanvang wedstrijd</label></div>
                <div class="col">
                    @if (CanEdit)
                    {
                        <div class="row">
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Start.Hour">
                                    @for (var i = 0; i <= 23; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-auto">:</div>
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.Start.Minute">
                                    @for (var i = 0; i <= 59; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    else
                    {
                        <span>@Model.Start.Hour</span><span>:</span><span>@Model.Start.Minute</span>
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4"><label class="col-form-label">Pauze na programma #:</label></div>
                <div class="col">
                    @if (CanEdit)
                    {
                        <div class="row">
                            <div class="col-auto">
                                <InputSelect class="form-control" @bind-Value="Model.BreakAfterProgram">
                                    <option value="0">Geen pauze</option>
                                    
                                    @if (Model.Programs?.Any() == true)
                                    {
                                        @for (var i = 1; i <= Model.Programs.Count(p => !string.IsNullOrEmpty(p.Stroke)); i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    else
                    {
                        <span>@(Model.BreakAfterProgram == 0 ? "Geen pauze" : Model.BreakAfterProgram)</span>
                    }
                </div>
            </div>
            
            @if (ShowProgramData)
            {
                if (CanEdit)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Afstand</th>
                                <th>Slag</th>
                                <th>Opmerkingen</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var list = Model.Programs?.OrderBy(p => p.Order).ToList() ?? new List<Program>();
                                var listCount = Math.Max(10, list.Count(p => !string.IsNullOrEmpty(p.Stroke)) + 1);

                                while (list.Count < listCount)
                                {
                                    list.Add(new Program()
                                    {
                                        Id = Guid.NewGuid().ToString(),
                                        Distance = 25
                                    });
                                }

                                Model.Programs = list;
                            }

                            @foreach (var program in Model.Programs)
                            {
                                <tr>
                                    <td>
                                        <InputSelect class="form-control" @bind-Value="program.Distance">
                                            <option value="25">25</option>
                                            <option value="50">50</option>
                                            <option value="50">100</option>
                                            <option value="50">200</option>
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <InputSelect class="form-control" @bind-Value="program.Stroke">
                                            <option value=""></option>
                                            <option value="Estafette">Estafette</option>
                                            <option value="Rugcrawl">Rugcrawl</option>
                                            <option value="Schoolslag">Schoolslag</option>
                                            <option value="Vlinderslag">Vlinderslag</option>
                                            <option value="Vrije slag">Vrije slag</option>
                                            <option value="Wisselslag">Wisselslag</option>
                                        </InputSelect>
                                    </td>
                                    <td><InputText class="form-control" @bind-Value="program.Comments" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else if (Model.Programs?.Any() != true)
                {
                    <div><em>Er zijn nog geen programma's ingesteld.</em></div>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Afstand</th>
                                <th>Slag</th>
                                <th>Opmerkingen</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var program in Model.Programs)
                        {
                            <tr>
                                <td>@program.Order</td>
                                <td>@program.Distance</td>
                                <td>@program.Stroke</td>
                                <td>@program.Comments</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            }
            
            @if (CanEdit)
            {
                <button class="btn btn-primary" type="submit">Submit</button>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public bool CanEdit { get; set; } = true;

    [Parameter]
    public bool ShowProgramData { get; set; }
    
    [Parameter]
    public EventCallback<Match> OnValidSubmitCallback { get; set; }

    [Parameter]
    public Match Model { get; set; } = new()
    {
        Date = new Date()
        {
            Day = DateTime.Now.Day,
            Month = DateTime.Now.Month,
            Year = DateTime.Now.Year
        },
        Warmup = new Time()
        {
            Hour = 15,
            Minute = 00
        },
        Start = new Time()
        {
            Hour = 15,
            Minute = 30
        }
    };

    private async Task ValidSubmitAsync()
    {
        await OnValidSubmitCallback.InvokeAsync(Model);
    }
}